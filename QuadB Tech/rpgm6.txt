//6.Implement a function that finds the longest common prefix of a given set of strings

use std::io;

fn longest_common_prefix(strs: Vec<String>) -> String {
    if strs.is_empty() {
        return String::new();
    } else if strs.len() == 1 {
        return strs[0].clone();
    }

    let first_str = &strs[0];

    for (i, c) in first_str.chars().enumerate() {
        for s in strs.iter().skip(1) {
            if let Some(sc) = s.chars().nth(i) {
                if sc != c {
                    return first_str[..i].to_string();
                }
            } else {
                return first_str[..i].to_string();
            }
        }
    }

    first_str.to_string()
}

fn main() {
    let mut input_strings: Vec<String> = Vec::new();

    println!("Enter the number of strings:");
    let mut num_strings = String::new();
    io::stdin().read_line(&mut num_strings).expect("Failed to read line");
    let num_strings: usize = num_strings.trim().parse().expect("Please enter a valid number");

    println!("Enter the strings (press Enter after each string):");

    for _ in 0..num_strings {
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read line");
        let input = input.trim().to_string();
        input_strings.push(input);
    }

    let common_prefix = longest_common_prefix(input_strings);
    println!("The longest common prefix is: {}", common_prefix);
}